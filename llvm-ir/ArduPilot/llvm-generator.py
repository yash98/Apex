import argparse
import json
import subprocess
import os

append_flags = ["-S", "-fno-discard-value-names", "-Xclang", "-disable-O0-optnone", "-emit-llvm"]
clang_optimization_flags = ["-O0", "-O1", "-O2", "-O3", "-Ofast", "-Os", "-Oz", "-Og", "-O", "-O4"]
opt_prefix = ["opt", "-S", "-mem2reg"]
link_prefix = ["llvm-link", "-S"]

class color:
    VIOLET = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def remove_from_list_if_present(l, li):
	for i in li:
		try:
			l.remove(i)
		except ValueError:
			pass

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description="Generate LLVM IR Files for Ardupilot")
	parser.add_argument("-c", "--compile-commands-json", type=str, help="Location of compile_commands.json file generated by ArduPilot's waf build")
	parser.add_argument("-l", "--build-commands-txt", type=str, help="Location of build_commands.txt file generated by saving verbose ArduPilot's waf build")
	parser.add_argument("build_dir", type=str, help="Directory to output the generated llvm ir")
	# parser.add_argument("ardu_repo", type=str, help="Directory of ArduPilot Repo")
	args = parser.parse_args()

	if not os.path.exists(args.build_dir):
		os.makedirs(args.build_dir)
	args.build_dir = os.path.abspath(args.build_dir)

	if args.compile_commands_json is not None:
		print("%s%sCOMPILING%s" % (color.BOLD, color.BLUE, color.ENDC))
		with open(args.compile_commands_json) as f:
			# List of Dict (3 keys: arguments directory file)
			compile_commands = json.load(f)
		# print(json.dumps(compile_commands[0], indent=4, sort_keys=True))

		total_commands = len(compile_commands)
		command_count = 1

		for command in compile_commands:
			os.chdir(command["directory"])

			# Don't generate ".d" files
			remove_from_list_if_present(command["arguments"], ["-MMD"])
			# Disable Optimization
			remove_from_list_if_present(command["arguments"], clang_optimization_flags)

			output_file_arg = command["arguments"][-1]
			output_file_arg = output_file_arg[:-1]+"ll"
			output_file_arg = output_file_arg.replace(command["directory"], args.build_dir, 1)

			output_file_split = output_file_arg.split("/")
			output_dir = os.path.join('/', *output_file_split[1:-1])
			if not os.path.exists(output_dir):
				os.makedirs(output_dir)
			
			clang_command = command["arguments"] + append_flags + [output_file_arg] 
			output_file = os.path.join('/', *output_file_split[1:])
			opt_command = opt_prefix + [output_file, "-o", output_file]
			print("%s%d/%d%s: %s%s%s" % (color.GREEN, command_count, total_commands, color.ENDC, color.YELLOW, " ".join(clang_command+ ["&&"] +opt_command), color.ENDC))

			clang_cmd_output = subprocess.run(clang_command)
			opt_cmd_output = subprocess.run(opt_command)
			command_count += 1
	
	if args.build_commands_txt is not None:
		print("%s%sLINKING%s" % (color.BOLD, color.BLUE, color.ENDC))
		build_commands_file = open(args.build_commands_txt, "r")

		os.chdir(args.build_dir)
		if not os.path.exists("bin"):
			os.mkdir("bin")

		line = build_commands_file.readline()
		link_count = 1
		while line:
			if line.startswith("[") and (not line.endswith(".a\n")) and "Linking" in line:
				line = build_commands_file.readline()
				arguments_list_str = line[line.rfind("[")+1:-2]
				arguments_list_str = arguments_list_str.replace("'", "").replace(" ", "")
				arguments_list = arguments_list_str.split(",")

				input_llvm = []
				output_llvm = None
				for arg in arguments_list:
					if arg.endswith(".o"):
						input_llvm.append(arg[:-1]+"ll")
					if arg.startswith("-o"):
						output_location_split = arg.split("/")
						output_llvm = "bin/" + output_location_split[-1] + ".ll"
						if output_location_split[-2] != "bin":
							raise Exception("Output file was not going to output to bin folder. This script doesn't handle this situation.")
				
				if os.path.exists(output_llvm):
					raise Exception("Two combined llvm files have same name. This script doesn't handle this situation.")
				
				link_command = link_prefix + ["-o", output_llvm] + input_llvm
				print("%s%d%s: %s%s%s" % (color.GREEN, link_count, color.ENDC, color.YELLOW, " ".join(link_command), color.ENDC))

				subprocess.run(link_command)
				link_count += 1

			line = build_commands_file.readline()
		
		build_commands_file.close()
